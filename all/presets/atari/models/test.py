import unittest
import torch
import torch_testing as tt
from all.environments import AtariEnvironment
from all.presets.atari.models import nature_rainbow
from all.presets.atari.models.recurrent import recurrent_features

# pylint: disable=bad-whitespace,bad-continuation
class TestAtariModels(unittest.TestCase):
    def setUp(self):
        torch.manual_seed(0)
        torch.backends.cudnn.deterministic = True
        torch.backends.cudnn.benchmark = False

    def test_rainbow_model_cpu(self):
        env = AtariEnvironment('Breakout')
        model = nature_rainbow(env)
        env.reset()
        x = torch.cat([env.state.raw] * 4, dim=1).float()
        out = model(x)
        tt.assert_almost_equal(
            out,
            torch.tensor([[
                0.0676, -0.0235,  0.0690, -0.0713, -0.0287,  0.0053, -0.0463,  0.0495,
                -0.0222, -0.0504,  0.0064, -0.0204,  0.0168,  0.0127, -0.0113, -0.0586,
                -0.0544,  0.0114, -0.0077,  0.0666, -0.0663, -0.0420, -0.0698, -0.0314,
                0.0272,  0.0361, -0.0537,  0.0301,  0.0036, -0.0472, -0.0499,  0.0114,
                0.0182,  0.0008, -0.0132, -0.0803, -0.0087, -0.0017,  0.0598, -0.0627,
                0.0859,  0.0117,  0.0105,  0.0309, -0.0370, -0.0111, -0.0262,  0.0338,
                0.0141, -0.0385,  0.0547,  0.0648, -0.0370,  0.0107, -0.0629, -0.0163,
                0.0282, -0.0670,  0.0161, -0.0244, -0.0030,  0.0038, -0.0208,  0.0005,
                0.0125,  0.0608, -0.0089,  0.0026,  0.0562, -0.0678,  0.0841, -0.0265,
                -0.0461, -0.0124,  0.0276,  0.0364,  0.0195, -0.0309, -0.0337, -0.0603,
                -0.0252, -0.0356,  0.0221,  0.0184, -0.0154, -0.0136, -0.0277,  0.0283,
                0.0495,  0.0185, -0.0357,  0.0305, -0.0052, -0.0432, -0.0135, -0.0554,
                -0.0094,  0.0272,  0.1030,  0.0049,  0.0012, -0.0140,  0.0146, -0.0979,
                0.0487,  0.0122, -0.0204,  0.0496, -0.0055, -0.0015, -0.0170,  0.0053,
                0.0104, -0.0742,  0.0742, -0.0381,  0.0104, -0.0065, -0.0564,  0.0453,
                -0.0057, -0.0029, -0.0722,  0.0094, -0.0561,  0.0284,  0.0402,  0.0233,
                -0.0716, -0.0424,  0.0165, -0.0505,  0.0006,  0.0219, -0.0601,  0.0656,
                -0.0175, -0.0524,  0.0355,  0.0007, -0.0042, -0.0443,  0.0871, -0.0403,
                -0.0031,  0.0171, -0.0359, -0.0520, -0.0344,  0.0239,  0.0099,  0.0004,
                0.0235,  0.0238, -0.0153,  0.0501, -0.0052,  0.0162,  0.0313, -0.0121,
                0.0009, -0.0366, -0.0628,  0.0386, -0.0671,  0.0480, -0.0595,  0.0568,
                -0.0604, -0.0540,  0.0403, -0.0187,  0.0649,  0.0029, -0.0003,  0.0020,
                -0.0056,  0.0471, -0.0145, -0.0126, -0.0395, -0.0455, -0.0437,  0.0056,
                0.0331,  0.0004,  0.0127, -0.0022, -0.0502,  0.0362,  0.0624, -0.0012,
                -0.0515,  0.0303, -0.0357, -0.0420,  0.0321, -0.0162,  0.0007, -0.0272,
                0.0227,  0.0187, -0.0459,  0.0496
            ]]),
            decimal=3
        )

    def test_recurrent_model_cuda(self):
        env = AtariEnvironment('Breakout', device='cuda')
        model = recurrent_features().to('cuda')
        env.reset()
        x = torch.cat([env.state.raw] * 4 * 10, dim=1)
        x = x.view((10, 4) + x.shape[2:])
        out = model(x)
        self.assertEqual(out.shape, (10, 512))

if __name__ == "__main__":
    unittest.main()
